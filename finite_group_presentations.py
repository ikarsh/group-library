import itertools
from typing import List, Tuple
from free_group import FreeGroup, FreeGroupElement, commutator
from subgroup_of_free_group import SubgroupOfFreeGroup


def C(n: int) -> SubgroupOfFreeGroup:
    F = FreeGroup(("a",))
    (a,) = F.gens()
    return F.normal_subgroup([a**n])


def dir_prod(gps: List[SubgroupOfFreeGroup]) -> SubgroupOfFreeGroup:
    F = FreeGroup(
        tuple(
            f"a{i}_{j}"
            for i in range(len(gps))
            for j in range(gps[i].free_group.rank())
        )
    )
    relations: List[FreeGroupElement] = []

    def gens(i: int) -> Tuple[FreeGroupElement, ...]:
        return tuple(
            F.elem_from_str(f"a{i}_{j}") for j in range(gps[i].free_group.rank())
        )

    for i, gp in enumerate(gps):
        for gen in gp.gens():
            relations.append(gen.substitute(F, gens(i)))

    for (i, gpi), (j, gpj) in itertools.combinations(enumerate(gps), 2):
        for geni in gpi.free_group.gens():
            for genj in gpj.free_group.gens():
                relations.append(
                    commutator(geni.substitute(F, gens(i)), genj.substitute(F, gens(j)))
                )

    return F.normal_subgroup(relations)


def D(n: int) -> SubgroupOfFreeGroup:
    F = FreeGroup(("a", "b"))
    a, b = F.gens()
    return F.normal_subgroup([a**n, b**2, a.conjugate(b) * a])


def Q8() -> SubgroupOfFreeGroup:
    """
    Source: https://proofwiki.org/wiki/Quaternion_Group/Group_Presentation
    """
    F = FreeGroup(("a", "b"))
    a, b = F.gens()
    return F.normal_subgroup([a**4, a ** (-2) * b**2, a * b * a * ~b])


def S(n: int) -> SubgroupOfFreeGroup:  # Generated by two-cycle and n-cycle
    """
    Source: https://math.stackexchange.com/questions/3972026/what-are-the-relations-in-this-presentation-of-s-n
    """
    F = FreeGroup(("a", "b"))
    a, b = F.gens()
    return F.normal_subgroup(
        [a**2, b**n, (a * b) ** (n - 1), commutator(a, b) ** 3]
        + [commutator(a, b**k) ** 2 for k in range(2, n // 2 + 1)]
    )


def S_(
    n: int,
) -> SubgroupOfFreeGroup:  # Alternative presentation, generated by two-cycles
    """
    Source: https://warwick.ac.uk/fac/sci/maths/people/staff/fbouyer/presentation_of_group.pdf
    """
    F = FreeGroup(tuple(f"a{i}" for i in range(n - 1)))
    gens = F.gens()
    relations: List[FreeGroupElement] = []
    for g in gens:
        relations.append(g**2)
    for (i, g1), (j, g2) in itertools.combinations(enumerate(gens), 2):
        assert i != j
        if abs(i - j) == 1:
            relations.append((g1 * g2) ** 3)
        else:
            relations.append(commutator(g1, g2))
    return F.normal_subgroup(relations)


# TODO find a presentation with two generators
def A(n: int) -> SubgroupOfFreeGroup:  # Generated by (1, 2, i)
    """
    Source: https://math.stackexchange.com/questions/122720/presentations-for-alternating-groups
    """
    F = FreeGroup(n - 2)
    gens = F.gens()
    relations: List[FreeGroupElement] = []
    for g in gens:
        relations.append(g**3)
    for g, h in itertools.combinations(gens, 2):
        relations.append((g * h) ** 2)
    return F.normal_subgroup(relations)
