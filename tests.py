from typing import List
from free_group import FreeGroup, FreeGroupElement, commutator


def test_free_group_identities():
    F = FreeGroup(("a", "b", "c"))
    a, b, c = F.gens()
    x, y, z = (a * b * ~a * b * c**2, b ** (-3) * c * a * b, a * b * c**5 * ~a)
    e = F.identity()

    # Group axioms
    assert x * e == e * x == x
    assert x * ~x == ~x * x == e
    assert (x * y) * z == x * (y * z)
    assert (x * y) ** (-1) == y ** (-1) * x ** (-1)

    # Exponentiation
    assert x**5 == x * x * x * x * x
    assert y ** (-2) == ~y * ~y

    # Conjugation
    assert x.conjugate(y) == y * x * ~y
    assert x.conjugate(e) == x
    assert e.conjugate(x) == e
    assert (x * y).conjugate(z) == x.conjugate(z) * y.conjugate(z)
    assert x.conjugate(y * z) == x.conjugate(z).conjugate(y)

    # Commutators
    c = commutator
    assert c(x, y) == x * y * ~x * ~y
    assert c(x, y) == ~c(y, x)
    assert c(x * y, z) == c(x, c(y, z)) * c(y, z) * c(x, z)

    # Jacobi identity
    assert (
        c(z.conjugate(y), c(x, y))
        * c(y.conjugate(x), c(z, x))
        * c(x.conjugate(z), c(y, z))
        == e
    )


def test_subgroup_new_generators():
    # Tests that the subgroup manages to form a basis, that generates the original and is no longer than it.
    # TODO: Add proofs the new generators are generated by the originals.

    # I am not sure how to test that the new generators are free.
    # Technically, returning the original generators would satisfy this test...

    F = FreeGroup(("a", "b"))
    a, b = F.gens()

    lst: List[List[FreeGroupElement]] = [
        [a, b],
        [a, b ** (-10)],
        [a * b, b * a],
        [(a * b) ** 2, a],
        [(a * b) ** 3, b],
        [a**2, b**3, commutator(a, b)],
        [(a * b) ** 10, commutator(a, b) ** 3, b**1, b.conjugate(a)],
        [a**2 * b**3 * a ** (-2), b**3, commutator(a, b.conjugate(a**5))],
    ]

    for gens in lst:
        H = F.subgroup(gens)
        free_gens = H.gens()
        assert len(free_gens) <= len(gens)
        for gen in gens:
            word = H.express(gen)
            assert word is not None
            for g, _ in word:
                assert g in free_gens

            w = F.identity()
            for g, n in word:
                w *= g**n
            assert w == gen


def test_subgroup_element_containement():
    F = FreeGroup(("a", "b"))
    a, b = F.gens()
    x, y = (a**3 * b ** (-2) * a * b**2, a * b * a * b * a * b)

    # contains_element
    assert F.subgroup([a, b]).contains_element(a)
    assert F.subgroup([x, y]).contains_element(x * y * x ** (-2) * y**3)
    assert not F.subgroup([a**2, b]).contains_element(a)


def test_normal_subgroup():
    F = FreeGroup(("a", "b"))
    a, b = F.gens()

    assert F.subgroup([a, b]).is_normal()
    assert F.subgroup([]).is_normal()
    assert not F.subgroup([a]).is_normal()
    assert F.subgroup(
        [a, a.conjugate(b), a.conjugate(b**2), a.conjugate(b**3), b**4]
    ).is_normal()

    N_S3 = F.subgroup([a**3, b**2, a.conjugate(b) * a]).normalization()
    assert N_S3.is_normal()
    reps: List[FreeGroupElement] = [
        a,
        b,
        a**2,
        a * b,
        a**2 * b,
    ]
    for elem in reps:
        assert not N_S3.contains_element(elem)


def test_all():
    test_free_group_identities()
    test_subgroup_new_generators()
    test_subgroup_element_containement()
    test_normal_subgroup()
